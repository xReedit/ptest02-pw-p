{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/shared/services/notificacion-push.service.ts","./node_modules/@capacitor/push-notifications/dist/esm/definitions.js","./node_modules/@capacitor/push-notifications/dist/esm/index.js"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SwPush } from '@angular/service-worker';\r\nimport { CrudHttpService } from './crud-http.service';\r\nimport { InfoTockenService } from './info-token.service';\r\nimport { VAPID_PUBLIC, IS_NATIVE } from '../config/config.const';\r\n\r\n\r\n\r\nimport {\r\n  ActionPerformed,\r\n  PushNotificationSchema,\r\n  PushNotifications,\r\n  Token,\r\n} from '@capacitor/push-notifications';\r\n// import { Observable } from 'rxjs/internal/Observable';\r\n// import { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\n// import { DialogDesicionComponent } from 'src/app/componentes/dialog-desicion/dialog-desicion.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificacionPushService {\r\n\r\n  // private VAPID_PUBLIC = 'BC7ietauZE99Hx9HkPyuGVr8jaYETyEJgH-gLaYIsbORYobppt9dX49_K_wubDqphu1afi7XrM6x1zAp4kJh_wU';\r\n\r\n  constructor(\r\n    private swPush: SwPush,\r\n    private crudService: CrudHttpService,\r\n    private infoTokenService: InfoTockenService,    \r\n    // private dialog: MatDialog,\r\n  ) {\r\n\r\n    // this.showMessages();\r\n\r\n    // this.swPush.notificationClicks.subscribe( event => {\r\n    //   // console.log('Received notification: ', event);\r\n    //   const url = event.notification.data.url;\r\n    //   window.open(url, '_blank');\r\n    // });\r\n\r\n    this.swPush.notificationClicks.subscribe( event => {\r\n      alert('aaaaaaaaaaa');\r\n      console.log('clic notification', event);\r\n      // const url = event.notification.data.url;\r\n      // window.location.reload();\r\n      // window.open('reparto.papaya.com.pe');\r\n    });\r\n\r\n\r\n    if (IS_NATIVE) {\r\n      PushNotifications.addListener('registration',\r\n        (token: Token) => {\r\n          console.log('addListener token.value ', token.value);\r\n          this.saveSuscripcion(token.value);\r\n        }\r\n      );\r\n  \r\n      PushNotifications.addListener('registrationError',\r\n        (error: any) => {\r\n          alert('Error en registrar: ' + JSON.stringify(error));\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  async getIsTienePermiso(): Promise<boolean> {\r\n    if (IS_NATIVE) {\r\n      let permStatus = await PushNotifications.checkPermissions();\r\n      return permStatus.receive === 'granted' ? true : false;\r\n    } else {\r\n      return Notification.permission === 'granted' ? true : false;\r\n    }\r\n  }\r\n\r\n\r\n  // se suscribe a la notificacion\r\n  suscribirse(): void {\r\n    // console.log('llego a suscribirse estado this.swPush.isEnabled: ', this.swPush.isEnabled);\r\n    // if ( this.swPush.isEnabled ) {\r\n      // this.swPush.subscription.subscribe(res => {\r\n        // if (!res) {return; }\r\n        // this.lanzarPermisoNotificationPush(option);\r\n        // });\r\n        // }\r\n    \r\n    //0123 cambiamos\r\n    if (IS_NATIVE ) {      \r\n      PushNotifications.requestPermissions().then(result => {\r\n        console.log('result.receive', result.receive);\r\n        if (result.receive === 'granted') {\r\n          // Register with Apple / Google to receive push via APNS/FCM\r\n          PushNotifications.register()\r\n        } else {\r\n          // Show some error\r\n          console.log('error al registrar');\r\n        }\r\n      });\r\n    } else {\r\n      this.keySuscribtion();\r\n    }\r\n\r\n  }\r\n\r\n  //  suscriberse\r\n  private keySuscribtion() {\r\n    // console.log('keySuscribtion');\r\n    this.swPush\r\n    .requestSubscription({\r\n      serverPublicKey: VAPID_PUBLIC,\r\n    })\r\n    .then(subscription => {\r\n      // send subscription to the server\r\n      console.log('suscrito a notificaciones push', subscription);\r\n      this.saveSuscripcion(subscription);\r\n    })\r\n    .catch(console.error);\r\n  }\r\n\r\n  private saveSuscripcion(_subscription: any): void {\r\n    const _data = {\r\n      suscripcion: _subscription,\r\n      idcliente: this.infoTokenService.infoUsToken.idcliente\r\n    };\r\n\r\n    // console.log('push', _data);\r\n\r\n    this.crudService.postFree(_data, 'push', 'suscripcion', false)\r\n      .subscribe(res => console.log(res));\r\n  }\r\n\r\n  // private lanzarPermisoNotificationPush(option: number = 0) {\r\n  //   const _dialogConfig = new MatDialogConfig();\r\n  //   _dialogConfig.disableClose = true;\r\n  //   _dialogConfig.hasBackdrop = true;\r\n  //   _dialogConfig.data = {idMjs: option};\r\n\r\n  //   console.log('show dialog DialogDesicionComponent');\r\n  //   const dialogReset = this.dialog.open(DialogDesicionComponent, _dialogConfig);\r\n  //   dialogReset.afterClosed().subscribe(result => {\r\n  //     if (result ) {\r\n  //       console.log('result dialog DialogDesicionComponent', result);\r\n  //       // this.suscribirse();\r\n  //       this.keySuscribtion();\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n  // showMessages() {\r\n\r\n  //   // this.swPush.messages\r\n  //   //   .subscribe(message => {\r\n\r\n  //   //     console.log('[App] Push message received', message);\r\n\r\n  //   //     // let notification = message['notification'];\r\n\r\n  //   //     // this.tweets.unshift({\r\n  //   //     //   text: notification['body'],\r\n  //   //     //   id_str: notification['tag'],\r\n  //   //     //   favorite_count: notification['data']['favorite_count'],\r\n  //   //     //   retweet_count: notification['data']['retwe<et_count'],\r\n  //   //     //   user: {\r\n  //   //     //     name: notification['title']\r\n  //   //     //   }\r\n  //   //     // })\r\n\r\n  //   //   });\r\n\r\n  // }\r\n\r\n  // onNotification() {\r\n  //   this.swPush.messages\r\n  // }\r\n\r\n}\r\n","/// <reference types=\"@capacitor/cli\" />\nexport {};\n","import { registerPlugin } from '@capacitor/core';\nconst PushNotifications = registerPlugin('PushNotifications', {});\nexport * from './definitions';\nexport { PushNotifications };\n"],"names":["Injectable","SwPush","CrudHttpService","InfoTockenService","VAPID_PUBLIC","IS_NATIVE","PushNotifications","NotificacionPushService","constructor","swPush","crudService","infoTokenService","notificationClicks","subscribe","event","alert","console","log","addListener","token","value","saveSuscripcion","error","JSON","stringify","getIsTienePermiso","permStatus","checkPermissions","receive","Notification","permission","suscribirse","requestPermissions","then","result","register","keySuscribtion","requestSubscription","serverPublicKey","subscription","catch","_subscription","_data","suscripcion","idcliente","infoUsToken","postFree","res","providedIn","registerPlugin"],"sourceRoot":"webpack:///","x_google_ignoreList":[1,2]}