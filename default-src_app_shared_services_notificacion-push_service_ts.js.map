{"version":3,"file":"default-src_app_shared_services_notificacion-push_service_ts.js","mappings":"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CAAiBhB,uDAAM,CAACyC,QAAD,CAAvB,CAAP;IACH;;;WACD,yBAAgBf,IAAhB,EAAsB;MAClB,OAAO,KAAKiB,YAAL,CAAkBjB,IAAlB,EAAwBV,IAAxB,CAA6Bd,qDAAI,CAAC,CAAD,CAAjC,CAAP;IACH;;;WACD,mCAA0B0C,KAA1B,EAAiC;MAC7B,OAAO,KAAKD,YAAL,CAAkB,qBAAlB,EACF3B,IADE,CACGhB,uDAAM,CAAC,UAAA5D,KAAK;QAAA,OAAIA,KAAK,CAACwG,KAAN,KAAgBA,KAApB;MAAA,CAAN,CADT,EAC2C1C,qDAAI,CAAC,CAAD,CAD/C,EACoDH,mDAAG,CAAC,UAAA3D,KAAK,EAAI;QACpE,IAAIA,KAAK,CAACoB,MAAN,KAAiByE,SAArB,EAAgC;UAC5B,OAAO7F,KAAK,CAACoB,MAAb;QACH;;QACD,MAAM,IAAIgD,KAAJ,CAAUpE,KAAK,CAACO,KAAhB,CAAN;MACH,CAL6D,CADvD,EAOFqF,SAPE,EAAP;IAQH;;;SACD,eAAgB;MACZ,OAAO,CAAC,CAAC,KAAKtB,aAAd;IACH;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMnF;EACF,gBAAYuG,EAAZ,EAAgB;IAAA;;IACZ,KAAKA,EAAL,GAAUA,EAAV;IACA,KAAKe,mBAAL,GAA2B,IAAIjE,0CAAJ,EAA3B;;IACA,IAAI,CAACkD,EAAE,CAACgB,SAAR,EAAmB;MACf,KA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","sources":["./src/app/shared/services/notificacion-push.service.ts","./node_modules/@capacitor/push-notifications/dist/esm/definitions.js","./node_modules/@capacitor/push-notifications/dist/esm/index.js","./node_modules/rxjs/_esm2015/internal/observable/never.js","./node_modules/rxjs/_esm2015/internal/operators/publish.js","./node_modules/@angular/service-worker/fesm2020/service-worker.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SwPush } from '@angular/service-worker';\r\nimport { CrudHttpService } from './crud-http.service';\r\nimport { InfoTockenService } from './info-token.service';\r\nimport { VAPID_PUBLIC, IS_NATIVE } from '../config/config.const';\r\n\r\n\r\n\r\nimport {\r\n  ActionPerformed,\r\n  PushNotificationSchema,\r\n  PushNotifications,\r\n  Token,\r\n} from '@capacitor/push-notifications';\r\n// import { Observable } from 'rxjs/internal/Observable';\r\n// import { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\n// import { DialogDesicionComponent } from 'src/app/componentes/dialog-desicion/dialog-desicion.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificacionPushService {\r\n\r\n  // private VAPID_PUBLIC = 'BC7ietauZE99Hx9HkPyuGVr8jaYETyEJgH-gLaYIsbORYobppt9dX49_K_wubDqphu1afi7XrM6x1zAp4kJh_wU';\r\n\r\n  constructor(\r\n    private swPush: SwPush,\r\n    private crudService: CrudHttpService,\r\n    private infoTokenService: InfoTockenService,    \r\n    // private dialog: MatDialog,\r\n  ) {\r\n\r\n    // this.showMessages();\r\n\r\n    // this.swPush.notificationClicks.subscribe( event => {\r\n    //   // console.log('Received notification: ', event);\r\n    //   const url = event.notification.data.url;\r\n    //   window.open(url, '_blank');\r\n    // });\r\n\r\n    this.swPush.notificationClicks.subscribe( event => {      \r\n      console.log('clic notification', event);\r\n      // const url = event.notification.data.url;\r\n      // window.location.reload();\r\n      // window.open('reparto.papaya.com.pe');\r\n    });\r\n\r\n\r\n    if (IS_NATIVE) {\r\n      PushNotifications.addListener('registration',\r\n        (token: Token) => {\r\n          console.log('addListener token.value ', token.value);\r\n          this.saveSuscripcion(token.value);\r\n        }\r\n      );\r\n  \r\n      PushNotifications.addListener('registrationError',\r\n        (error: any) => {\r\n          alert('Error en registrar: ' + JSON.stringify(error));\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  public async getIsTienePermiso(): Promise<boolean> {\r\n    if (IS_NATIVE) {\r\n      let permStatus = await PushNotifications.checkPermissions();\r\n      return permStatus.receive === 'granted' ? true : false;\r\n    } else {\r\n      return Notification.permission === 'granted' ? true : false;\r\n    }\r\n  }\r\n\r\n\r\n  // se suscribe a la notificacion\r\n  public suscribirse(): void {\r\n    // console.log('llego a suscribirse estado this.swPush.isEnabled: ', this.swPush.isEnabled);\r\n    // if ( this.swPush.isEnabled ) {\r\n      // this.swPush.subscription.subscribe(res => {\r\n        // if (!res) {return; }\r\n        // this.lanzarPermisoNotificationPush(option);\r\n        // });\r\n        // }\r\n    \r\n    //0123 cambiamos\r\n    if (IS_NATIVE ) {      \r\n      PushNotifications.requestPermissions().then(result => {\r\n        console.log('result.receive', result.receive);\r\n        if (result.receive === 'granted') {\r\n          // Register with Apple / Google to receive push via APNS/FCM\r\n          PushNotifications.register()\r\n        } else {\r\n          // Show some error\r\n          console.log('error al registrar');\r\n        }\r\n      });\r\n    } else {\r\n      this.keySuscribtion();\r\n    }\r\n\r\n  }\r\n\r\n  //  suscriberse\r\n  private keySuscribtion() {\r\n    // console.log('keySuscribtion');\r\n    this.swPush\r\n    .requestSubscription({\r\n      serverPublicKey: VAPID_PUBLIC,\r\n    })\r\n    .then(subscription => {\r\n      // send subscription to the server\r\n      console.log('suscrito a notificaciones push', subscription);\r\n      this.saveSuscripcion(subscription);\r\n    })\r\n    .catch(console.error);\r\n  }\r\n\r\n  private saveSuscripcion(_subscription: any): void {\r\n    const _data = {\r\n      suscripcion: _subscription,\r\n      idcliente: this.infoTokenService.infoUsToken.idcliente\r\n    };\r\n\r\n    // console.log('push', _data);\r\n\r\n    this.crudService.postFree(_data, 'push', 'suscripcion', false)\r\n      .subscribe(res => console.log(res));\r\n  }\r\n\r\n  // private lanzarPermisoNotificationPush(option: number = 0) {\r\n  //   const _dialogConfig = new MatDialogConfig();\r\n  //   _dialogConfig.disableClose = true;\r\n  //   _dialogConfig.hasBackdrop = true;\r\n  //   _dialogConfig.data = {idMjs: option};\r\n\r\n  //   console.log('show dialog DialogDesicionComponent');\r\n  //   const dialogReset = this.dialog.open(DialogDesicionComponent, _dialogConfig);\r\n  //   dialogReset.afterClosed().subscribe(result => {\r\n  //     if (result ) {\r\n  //       console.log('result dialog DialogDesicionComponent', result);\r\n  //       // this.suscribirse();\r\n  //       this.keySuscribtion();\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n  // showMessages() {\r\n\r\n  //   // this.swPush.messages\r\n  //   //   .subscribe(message => {\r\n\r\n  //   //     console.log('[App] Push message received', message);\r\n\r\n  //   //     // let notification = message['notification'];\r\n\r\n  //   //     // this.tweets.unshift({\r\n  //   //     //   text: notification['body'],\r\n  //   //     //   id_str: notification['tag'],\r\n  //   //     //   favorite_count: notification['data']['favorite_count'],\r\n  //   //     //   retweet_count: notification['data']['retwe<et_count'],\r\n  //   //     //   user: {\r\n  //   //     //     name: notification['title']\r\n  //   //     //   }\r\n  //   //     // })\r\n\r\n  //   //   });\r\n\r\n  // }\r\n\r\n  // onNotification() {\r\n  //   this.swPush.messages\r\n  // }\r\n\r\n}\r\n","/// <reference types=\"@capacitor/cli\" />\nexport {};\n","import { registerPlugin } from '@capacitor/core';\nconst PushNotifications = registerPlugin('PushNotifications', {});\nexport * from './definitions';\nexport { PushNotifications };\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\nexport const NEVER = new Observable(noop);\nexport function never() {\n    return NEVER;\n}\n","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n","/**\n * @license Angular v14.2.12\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            const currentController = defer(() => of(serviceWorker.controller));\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter((c) => !!c));\n            this.registration = (this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            const events = eventsUnconnected.pipe(publish());\n            events.connect();\n            this.events = events;\n        }\n    }\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage({\n                action,\n                ...payload,\n            });\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    postMessageWithOperation(type, payload, operationNonce) {\n        const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n    }\n    generateNonce() {\n        return Math.round(Math.random() * 10000000);\n    }\n    eventsOfType(type) {\n        let filterFn;\n        if (typeof type === 'string') {\n            filterFn = (event) => event.type === type;\n        }\n        else {\n            filterFn = (event) => type.includes(event.type);\n        }\n        return this.events.pipe(filter(filterFn));\n    }\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    waitForOperationCompleted(nonce) {\n        return this.eventsOfType('OPERATION_COMPLETED')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.result !== undefined) {\n                return event.result;\n            }\n            throw new Error(event.error);\n        }))\n            .toPromise();\n    }\n    get isEnabled() {\n        return !!this.serviceWorker;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nclass SwPush {\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const pushOptions = { userVisibleOnly: true };\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    decodeBase64(input) {\n        return atob(input);\n    }\n}\nSwPush.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwPush, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwPush.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwPush, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\nclass SwUpdate {\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.versionUpdates = NEVER;\n            this.available = NEVER;\n            this.activated = NEVER;\n            this.unrecoverable = NEVER;\n            return;\n        }\n        this.versionUpdates = this.sw.eventsOfType([\n            'VERSION_DETECTED',\n            'VERSION_INSTALLATION_FAILED',\n            'VERSION_READY',\n            'NO_NEW_VERSION_DETECTED',\n        ]);\n        this.available = this.versionUpdates.pipe(filter((evt) => evt.type === 'VERSION_READY'), map(evt => ({\n            type: 'UPDATE_AVAILABLE',\n            current: evt.currentVersion,\n            available: evt.latestVersion,\n        })));\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n        this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', { nonce }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * In most cases, you should not use this method and instead should update a client by reloading\n     * the page.\n     *\n     * <div class=\"alert is-important\">\n     *\n     * Updating a client without reloading can easily result in a broken application due to a version\n     * mismatch between the [application shell](guide/glossary#app-shell) and other page resources,\n     * such as [lazy-loaded chunks](guide/glossary#lazy-loading), whose filenames may change between\n     * versions.\n     *\n     * Only use this method, if you are certain it is safe for your specific use case.\n     *\n     * </div>\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', { nonce }, nonce);\n    }\n}\nSwUpdate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwUpdate, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwUpdate.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwUpdate });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: SwUpdate, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {\n}\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    return () => {\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        let readyToRegister$;\n        if (typeof options.registrationStrategy === 'function') {\n            readyToRegister$ = options.registrationStrategy();\n        }\n        else {\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n            switch (strategy) {\n                case 'registerImmediately':\n                    readyToRegister$ = of(null);\n                    break;\n                case 'registerWithDelay':\n                    readyToRegister$ = delayWithTimeout(+args[0] || 0);\n                    break;\n                case 'registerWhenStable':\n                    readyToRegister$ = !args[0] ? whenStable(injector) :\n                        merge(whenStable(injector), delayWithTimeout(+args[0]));\n                    break;\n                default:\n                    // Unknown strategy.\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n            }\n        }\n        // Don't return anything to avoid blocking the application until the SW is registered.\n        // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n        // given that some registration strategies wait for the app to stabilize).\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n        const ngZone = injector.get(NgZone);\n        ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, { scope: options.scope })\n            .catch(err => console.error('Service worker registration failed with:', err))));\n    };\n}\nfunction delayWithTimeout(timeout) {\n    return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n    const appRef = injector.get(ApplicationRef);\n    return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * @publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: SwRegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [SwRegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ServiceWorkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nServiceWorkerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: ServiceWorkerModule });\nServiceWorkerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ServiceWorkerModule, providers: [SwPush, SwUpdate] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ServiceWorkerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [SwPush, SwUpdate],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate };\n"],"names":["Injectable","SwPush","CrudHttpService","InfoTockenService","VAPID_PUBLIC","IS_NATIVE","PushNotifications","NotificacionPushService","constructor","swPush","crudService","infoTokenService","notificationClicks","subscribe","event","console","log","addListener","token","value","saveSuscripcion","error","alert","JSON","stringify","getIsTienePermiso","permStatus","checkPermissions","receive","Notification","permission","suscribirse","requestPermissions","then","result","register","keySuscribtion","requestSubscription","serverPublicKey","subscription","catch","_subscription","_data","suscripcion","idcliente","infoUsToken","postFree","res","providedIn","registerPlugin","Observable","noop","NEVER","never","Subject","multicast","publish","selector","isPlatformBrowser","i0","InjectionToken","NgZone","ApplicationRef","PLATFORM_ID","APP_INITIALIZER","Injector","NgModule","defer","throwError","fromEvent","of","concat","merge","map","filter","switchMap","take","tap","delay","ERR_SW_NOT_SUPPORTED","errorObservable","message","Error","NgswCommChannel","serviceWorker","worker","events","registration","controllerChangeEvents","controllerChanges","pipe","controller","currentController","controllerWithChanges","c","getRegistration","rawEvents","rawEventPayload","data","eventsUnconnected","type","connect","action","payload","sw","postMessage","toPromise","undefined","operationNonce","waitForOperationCompleted","Promise","all","Math","round","random","filterFn","includes","eventsOfType","nonce","subscriptionChanges","isEnabled","messages","pushManager","workerDrivenSubscriptions","pm","getSubscription","options","reject","pushOptions","userVisibleOnly","key","decodeBase64","replace","applicationServerKey","Uint8Array","ArrayBuffer","length","i","charCodeAt","sub","next","doUnsubscribe","unsubscribe","success","input","atob","ɵfac","ɵprov","SwUpdate","versionUpdates","available","activated","unrecoverable","evt","current","currentVersion","latestVersion","generateNonce","postMessageWithOperation","SwRegistrationOptions","SCRIPT","ngswAppInitializer","injector","script","platformId","navigator","enabled","addEventListener","readyToRegister$","registrationStrategy","split","strategy","args","delayWithTimeout","whenStable","ngZone","get","runOutsideAngular","scope","err","timeout","appRef","isStable","stable","ngswCommChannelFactory","opts","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","multi","ɵmod","ɵinj"],"sourceRoot":"webpack:///","x_google_ignoreList":[1,2,3,4,5]}