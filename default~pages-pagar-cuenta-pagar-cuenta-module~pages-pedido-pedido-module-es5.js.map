{"version":3,"sources":["webpack:///src/app/shared/services/estado-pedido-cliente.service.ts","webpack:///src/app/shared/services/registrar-pago.service.ts"],"names":["EstadoPedidoClienteService","listenStatusService","crudService","infoTokenService","estadoPedido","keyStorage","timeInterval","timeNow","Date","hayPedidoPendiente","timeRestanteAproxSource","timeRestanteAprox$","asObservable","hayCuentaClienteSource","hayCuentaCliente$","deserializar","dataPost","idsede","getInfoUs","idcliente","_data","localStorage","getItem","JSON","parse","getCuentaTotales","importeCuenta","postFree","subscribe","res","data","length","hayPedidoCliente","importe","setImporte","calcTimeAprox","notifyChange","next","Promise","resolve","_rpt","success","val","estado","horaInt","isTiempoAproxCumplido","hayPedidoClientePendiente","isPagada","isRegisterOnePago","numMinAprox","rpt","getTimeAprox","setTimeout","min","calTimeMin","clearTimeout","timeMin","getTime","Math","round","isNaN","setEstadoPedido","setItem","stringify","providedIn","RegistrarPagoService","socketService","establecimiento","infoToken","objTotales","atob","_importe","_dataTransactionRegister","dataClientePago","isDelivery","getSubtotales","_objOperacion","idorg","get","mesa","numMesaLector","isdelivery","objSubTotal","objTransaction","objCliente","objOperacion","observer","emit","setIdPwaPago","idregistro_pago","id","toString","idPwaPago","parseInt","removeItem","_res","getFree","ip","loadDataTransaction","resPagoIsSucces","responseTransaction","error","isSuccess","upDataTransaction"],"mappings":"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","file":"default~pages-pagar-cuenta-pagar-cuenta-module~pages-pedido-pedido-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { EstadoPedidoModel } from 'src/app/modelos/estado.pedido.model';\nimport { ListenStatusService } from './listen-status.service';\nimport { CrudHttpService } from './crud-http.service';\nimport { InfoTockenService } from './info-token.service';\nimport { JsonpInterceptor } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { timeInterval, timeout } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EstadoPedidoClienteService {\n  estadoPedido = new EstadoPedidoModel();\n\n  private keyStorage = 'sys::status';\n  private timeInterval = null;\n  private timeNow = new Date();\n  private hayPedidoPendiente = false;\n\n  private timeRestanteAproxSource = new BehaviorSubject<number>(0);\n  public timeRestanteAprox$ = this.timeRestanteAproxSource.asObservable();\n\n  private hayCuentaClienteSource = new BehaviorSubject<any>(null);\n  public hayCuentaCliente$ = this.hayCuentaClienteSource.asObservable();\n\n  private dataPost: any;\n\n  constructor(\n    private listenStatusService: ListenStatusService,\n    private crudService: CrudHttpService,\n    private infoTokenService: InfoTockenService\n  ) {\n\n    this.deserializar();\n\n    this.dataPost = {\n      idsede: this.infoTokenService.getInfoUs().idsede,\n      idcliente: this.infoTokenService.getInfoUs().idcliente\n    };\n\n    // this.listenStatusService.hayPedidoPendiente$.subscribe((res: boolean) => {\n    //   console.log('======== listen setHayPedidoPendiente', res);\n    //   this.setHayPedidoPendiente(res);\n    // });\n  }\n\n  private deserializar(): void {\n    let _data = localStorage.getItem(this.keyStorage);\n    _data = _data === '{}' || '' ? null : _data;\n    if ( _data ) {\n      this.estadoPedido = JSON.parse(_data);\n    } else {\n      this.estadoPedido = new EstadoPedidoModel();\n    }\n\n  }\n\n  get() {\n    // const _data = localStorage.getItem(this.keyStorage);\n    this.deserializar();\n    // if ( !this.estadoPedido ) {\n      // verificar en la bd si tiene pedido sin pagar\n      this.getCuentaTotales();\n\n    //  }\n  }\n\n  // solo para estado pedido al momento de hacer clic en ver cuenta se mostrara la cuenta getCuenta()\n  getCuentaTotales(): number {\n\n    let importeCuenta = 0;\n    this.crudService.postFree(this.dataPost, 'pedido', 'lacuenta-cliente-totales', false).subscribe( (res: any) => {\n      if ( res.data.length === 0 ) { this.estadoPedido.hayPedidoCliente = false; return; } // si no hay cuenta pedido del cliente\n      importeCuenta = res.data[0].importe || 0;\n      this.setImporte(importeCuenta);\n\n      this.estadoPedido.hayPedidoCliente = true;\n      this.calcTimeAprox(); // calcula el tiempo aproximado\n\n      // this.setisPagada(importeCuenta === 0 ? true : false);\n      // if (this.hayPedidoFromStorage) {\n        // notificar pedido pediente por finalizar\n        // return;\n      // }\n      // console.log('cuenta cliente totales', res);\n\n\n\n      // la cuenta\n      // this.hayCuentaClienteSource.next(res);\n      this.notifyChange();\n      // return res;\n    });\n\n    return importeCuenta;\n  }\n\n  getCuenta(): any {\n    // console.log('pide la cuenta');\n    this.crudService.postFree(this.dataPost, 'pedido', 'lacuenta-cliente', false).subscribe( (res: any) => {\n      if ( res.data.length === 0 ) { this.estadoPedido.hayPedidoCliente = false; return; } // si no hay cuenta pedido del cliente\n\n      this.estadoPedido.hayPedidoCliente = true;\n      this.calcTimeAprox(); // calcula el tiempo aproximado\n      // console.log('cuenta cliente', res);\n\n\n      // la cuenta\n      this.hayCuentaClienteSource.next(res);\n      this.notifyChange();\n      return res;\n    });\n  }\n\n  getImporteCuenta() {\n    return new Promise(resolve => {\n      this.crudService.postFree(this.dataPost, 'pedido', 'lacuenta-cliente-totales', false).subscribe( (res: any) => {\n        const _rpt = res.success ? res.data[0].importe : 0;\n        resolve(_rpt);\n      });\n    });\n  }\n\n  getObj(): EstadoPedidoModel {\n    // const _data = localStorage.getItem(this.keyStorage);\n    // this.estadoPedido = _data;\n    if ( !this.estadoPedido ) {\n      this.deserializar();\n    }\n\n    return this.estadoPedido;\n  }\n\n  setEstado(val: number): void {\n    this.deserializar();\n    this.estadoPedido.estado = val;\n    this.notifyChange();\n  }\n\n  setImporte(val: number): void {\n    this.deserializar();\n    this.estadoPedido.importe = val;\n    this.notifyChange();\n  }\n\n  setHoraInitPedido(val: number): void {\n    this.deserializar();\n    this.estadoPedido.horaInt = val;\n    this.notifyChange();\n  }\n\n  setTimeAprox(val: boolean): void {\n    this.deserializar();\n    this.estadoPedido.isTiempoAproxCumplido = val;\n    this.notifyChange();\n  }\n\n  setHayPedidoPendiente(val: boolean): void {\n    this.deserializar();\n    this.estadoPedido.hayPedidoClientePendiente = val;\n    this.notifyChange();\n  }\n\n  setisPagada(val: boolean): void {\n    this.deserializar();\n    this.estadoPedido.isPagada = val;\n    this.notifyChange();\n  }\n\n  setisRegisterPago(val: boolean): void {\n    this.deserializar();\n    this.estadoPedido.isRegisterOnePago = val;\n    this.notifyChange();\n  }\n\n  // obtener el tiempo aproximado del pedido\n  calcTimeAprox(): void {\n    this.crudService.postFree(this.dataPost, 'pedido', 'calc-time-despacho', false).subscribe( (res: any) => {\n      // console.log('calc time despacho', res);\n      this.estadoPedido.estado = 0; // en espera\n      this.estadoPedido.numMinAprox = res.data[0].rpt;\n      // this.estadoPedido.horaInt = this.timeNow.getTime();\n      this.estadoPedido.isTiempoAproxCumplido = false;\n      this.notifyChange();\n\n      // console.log('this.estadoPedido', this.estadoPedido);\n      this.getTimeAprox();\n    });\n  }\n\n  // calcula el tiempo\n  getTimeAprox(): number {\n    const rpt = 0;\n    if ( this.estadoPedido.estado === 0 ) {\n      // this.timeInterval = setInterval(this.calTimeMin, 4000);\n      this.timeInterval = setTimeout(() => {\n        let min = this.calTimeMin();\n        if ( min <= 0 ) {\n          this.estadoPedido.estado = 1;\n          this.notifyChange();\n          this.clearTimeout();\n          clearTimeout(this.timeInterval);\n          min = 0;\n        } else {\n          this.getTimeAprox();\n        }\n\n        this.timeRestanteAproxSource.next(min);\n      }, 2000);\n    } else {\n      this.clearTimeout();\n    }\n\n    return rpt;\n  }\n\n  private calTimeMin(): number {\n    let timeMin = new Date().getTime() - this.estadoPedido.horaInt;\n    timeMin = Math.round(((timeMin % 86400000) % 3600000) / 60000);\n    timeMin = this.estadoPedido.numMinAprox - timeMin;\n\n    // let min = this.calTimeMin();\n        // if ( timeMin <= 0 ) {\n        //   this.estadoPedido.estado = 1;\n        //   this.notifyChange();\n        //   this.clearTimeout();\n        //   timeMin = 0;\n        // }\n\n        // this.timeRestanteAproxSource.next(timeMin);\n\n    return  isNaN(timeMin) ? 0 : timeMin;\n  }\n\n  private clearTimeout(): void {\n    // if (this.timeInterval) {\n      clearTimeout(this.timeInterval);\n      this.timeInterval = null;\n    // }\n  }\n\n  private notifyChange(): void {\n    this.listenStatusService.setEstadoPedido(this.estadoPedido);\n\n    localStorage.setItem(this.keyStorage, JSON.stringify(this.estadoPedido));\n\n    // calcula el tiempo de espera aproximadamente\n    // this.getTimeAprox();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InfoTockenService } from './info-token.service';\nimport { UsuarioTokenModel } from 'src/app/modelos/usuario.token.model';\nimport { CrudHttpService } from './crud-http.service';\nimport { SocketService } from './socket.service';\nimport { ClientePagoModel } from 'src/app/modelos/cliente.pago.model';\nimport { Observable } from 'rxjs';\nimport { EstablecimientoService } from './establecimiento.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrarPagoService {\n\n  private infoToken: UsuarioTokenModel;\n  private objTotales: any;\n  private responseTransaction: any;\n\n  constructor(\n    private infoTokenService: InfoTockenService,\n    private crudService: CrudHttpService,\n    private socketService: SocketService,\n    private establecimiento: EstablecimientoService\n  ) {\n    this.infoToken = this.infoTokenService.getInfoUs();\n  }\n\n  private getSubtotales(): void {\n    this.objTotales = JSON.parse(atob(localStorage.getItem('sys::st')));\n  }\n\n  registrarPago(_importe: string, _dataTransactionRegister: any, dataClientePago: ClientePagoModel, isDelivery: boolean = false) {\n    this.getSubtotales();\n\n    // console.log('this.establecimiento.get() from pago', this.establecimiento.get());\n\n    const _objOperacion = {\n      idcliente: this.infoToken.idcliente,\n      idorg: this.establecimiento.get().idorg, // this.infoToken.idorg,\n      idsede: this.establecimiento.get().idsede, // this.infoToken.idsede,\n      mesa: this.infoToken.numMesaLector,\n      importe: _importe\n    };\n\n    const _data = {\n      idcliente: _objOperacion.idcliente,\n      idorg: _objOperacion.idorg,\n      idsede: _objOperacion.idsede,\n      mesa: _objOperacion.mesa,\n      importe: _objOperacion.importe,\n      isdelivery: isDelivery,\n      objSubTotal: this.objTotales,\n      objTransaction: _dataTransactionRegister,\n      objCliente: dataClientePago,\n      objOperacion: _objOperacion\n    };\n\n    // console.log('registro pago service', _data);\n\n    return new Observable(observer => {\n      this.crudService.postFree(_data, 'transaction', 'registrar-pago', false).subscribe((res: any) => {\n        // console.log('registro-pago', res);\n        // if ( res.success ) {\n          this.socketService.emit('notificar-pago-pwa', _data);\n          // this.setIdRegistroPagoTransaction(res.data[0].idregistro_pago);\n          this.setIdPwaPago(res.data[0].idregistro_pago);\n          observer.next(res.data[0].idregistro_pago);\n        // }\n      });\n    });\n\n\n  }\n\n  setIdPwaPago(id: number) {\n    localStorage.setItem('sys::irp', id.toString());\n  }\n\n  getIdPwaPago(): number {\n    let idPwaPago = parseInt(localStorage.getItem('sys::irp'), 0);\n    idPwaPago = idPwaPago ? 0 : idPwaPago;\n    localStorage.removeItem('sys::irp');\n    return idPwaPago;\n  }\n\n  getIpClient(): string {\n    let _res = '';\n    this.crudService.getFree('https://api.ipify.org?format=jsonp&callback=?').subscribe((res: any) => {\n      _res = res.ip;\n    });\n\n    return _res;\n  }\n\n\n  // manejo de respuesta en local storage\n  getDataTrasaction(): any {\n    // toma la respuesta de pago\n    // this.responseTransaction = JSON.parse(localStorage.getItem('sys::transaction-response'));\n    this.loadDataTransaction();\n    const resPagoIsSucces = this.responseTransaction ? !this.responseTransaction.error : false;\n    this.responseTransaction.isSuccess = !resPagoIsSucces;\n\n\n    return this.responseTransaction;\n  }\n\n  private setIdRegistroPagoTransaction(id: number): void {\n    this.loadDataTransaction();\n    this.responseTransaction.idregistro_pago = id;\n    this.upDataTransaction();\n  }\n\n  private loadDataTransaction(): void {\n    // toma la respuesta de pago\n    this.responseTransaction = JSON.parse(localStorage.getItem('sys::transaction-response'));\n  }\n\n  private upDataTransaction(): void {\n    localStorage.setItem('sys::transaction-response', JSON.stringify(this.responseTransaction));\n  }\n\n  removeLocalDataTransaction(): void {\n    localStorage.removeItem('sys::transaction-response');\n    this.responseTransaction = null;\n  }\n}\n"]}